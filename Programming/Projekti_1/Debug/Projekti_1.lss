
Projekti_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  000009a0  00000a34  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009a0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  0080011a  0080011a  00000a4e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a4e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a80  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  00000ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000096f  00000000  00000000  00000b40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000076e  00000000  00000000  000014af  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000570  00000000  00000000  00001c1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000244  00000000  00000000  00002190  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000441  00000000  00000000  000023d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004d2  00000000  00000000  00002815  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00002ce7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 1a 04 	jmp	0x834	; 0x834 <__vector_5>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 2d 04 	jmp	0x85a	; 0x85a <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ea       	ldi	r30, 0xA0	; 160
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 31       	cpi	r26, 0x1A	; 26
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e1       	ldi	r26, 0x1A	; 26
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 32       	cpi	r26, 0x2A	; 42
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 a8 04 	call	0x950	; 0x950 <main>
  9e:	0c 94 ce 04 	jmp	0x99c	; 0x99c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setup_system>:
	int8_t run;
}task_list[TASK_MAX];



void setup_system(void){
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
	
	// Set led pin as output
	DDRD |= (1<<PD5);
  ae:	8a e2       	ldi	r24, 0x2A	; 42
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	2a e2       	ldi	r18, 0x2A	; 42
  b4:	30 e0       	ldi	r19, 0x00	; 0
  b6:	f9 01       	movw	r30, r18
  b8:	20 81       	ld	r18, Z
  ba:	20 62       	ori	r18, 0x20	; 32
  bc:	fc 01       	movw	r30, r24
  be:	20 83       	st	Z, r18
	DDRD &= ~(1<<PD2);
  c0:	8a e2       	ldi	r24, 0x2A	; 42
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	2a e2       	ldi	r18, 0x2A	; 42
  c6:	30 e0       	ldi	r19, 0x00	; 0
  c8:	f9 01       	movw	r30, r18
  ca:	20 81       	ld	r18, Z
  cc:	2b 7f       	andi	r18, 0xFB	; 251
  ce:	fc 01       	movw	r30, r24
  d0:	20 83       	st	Z, r18
	// Port C consists only input pins. PC0 (ADC), PC6 (reset)
	DDRC = 0x00;
  d2:	87 e2       	ldi	r24, 0x27	; 39
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	fc 01       	movw	r30, r24
  d8:	10 82       	st	Z, r1
	// Set the sounder pin as output
	DDRB |= (1<<PB1);
  da:	84 e2       	ldi	r24, 0x24	; 36
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	24 e2       	ldi	r18, 0x24	; 36
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	f9 01       	movw	r30, r18
  e4:	20 81       	ld	r18, Z
  e6:	22 60       	ori	r18, 0x02	; 2
  e8:	fc 01       	movw	r30, r24
  ea:	20 83       	st	Z, r18
	
	// Setting the time triggered program
	// timer 2
	TCCR2B |= (1<<CS21);				// normal mode, prescaler 8
  ec:	81 eb       	ldi	r24, 0xB1	; 177
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	21 eb       	ldi	r18, 0xB1	; 177
  f2:	30 e0       	ldi	r19, 0x00	; 0
  f4:	f9 01       	movw	r30, r18
  f6:	20 81       	ld	r18, Z
  f8:	22 60       	ori	r18, 0x02	; 2
  fa:	fc 01       	movw	r30, r24
  fc:	20 83       	st	Z, r18
	TIMSK2 |= (1<<TOIE2);				// Timer overflow interrupt enable
  fe:	80 e7       	ldi	r24, 0x70	; 112
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	20 e7       	ldi	r18, 0x70	; 112
 104:	30 e0       	ldi	r19, 0x00	; 0
 106:	f9 01       	movw	r30, r18
 108:	20 81       	ld	r18, Z
 10a:	21 60       	ori	r18, 0x01	; 1
 10c:	fc 01       	movw	r30, r24
 10e:	20 83       	st	Z, r18
	
	
	PCICR |= (1<<PCIE2);
 110:	88 e6       	ldi	r24, 0x68	; 104
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	28 e6       	ldi	r18, 0x68	; 104
 116:	30 e0       	ldi	r19, 0x00	; 0
 118:	f9 01       	movw	r30, r18
 11a:	20 81       	ld	r18, Z
 11c:	24 60       	ori	r18, 0x04	; 4
 11e:	fc 01       	movw	r30, r24
 120:	20 83       	st	Z, r18
	PCMSK2 |= (1<<PCINT18);	// Enable PCINT in PC3
 122:	8d e6       	ldi	r24, 0x6D	; 109
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	2d e6       	ldi	r18, 0x6D	; 109
 128:	30 e0       	ldi	r19, 0x00	; 0
 12a:	f9 01       	movw	r30, r18
 12c:	20 81       	ld	r18, Z
 12e:	24 60       	ori	r18, 0x04	; 4
 130:	fc 01       	movw	r30, r24
 132:	20 83       	st	Z, r18
	
	
	// Initialize fast pwm for the led
	TCCR0A |= (1<<WGM01);				// Set the mode to CTC
 134:	84 e4       	ldi	r24, 0x44	; 68
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	24 e4       	ldi	r18, 0x44	; 68
 13a:	30 e0       	ldi	r19, 0x00	; 0
 13c:	f9 01       	movw	r30, r18
 13e:	20 81       	ld	r18, Z
 140:	22 60       	ori	r18, 0x02	; 2
 142:	fc 01       	movw	r30, r24
 144:	20 83       	st	Z, r18
	TCCR0A |= (1<<COM0B0);				// Toggle 0C0B 
 146:	84 e4       	ldi	r24, 0x44	; 68
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	24 e4       	ldi	r18, 0x44	; 68
 14c:	30 e0       	ldi	r19, 0x00	; 0
 14e:	f9 01       	movw	r30, r18
 150:	20 81       	ld	r18, Z
 152:	20 61       	ori	r18, 0x10	; 16
 154:	fc 01       	movw	r30, r24
 156:	20 83       	st	Z, r18
	TCCR0B |= (1<<CS02);	// Set prescaler to 256
 158:	85 e4       	ldi	r24, 0x45	; 69
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	25 e4       	ldi	r18, 0x45	; 69
 15e:	30 e0       	ldi	r19, 0x00	; 0
 160:	f9 01       	movw	r30, r18
 162:	20 81       	ld	r18, Z
 164:	24 60       	ori	r18, 0x04	; 4
 166:	fc 01       	movw	r30, r24
 168:	20 83       	st	Z, r18
	OCR0A = 200;
 16a:	87 e4       	ldi	r24, 0x47	; 71
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	28 ec       	ldi	r18, 0xC8	; 200
 170:	fc 01       	movw	r30, r24
 172:	20 83       	st	Z, r18
	
	
	// Initialize fast pwm for the sounder
	TCCR1A |= (1 << WGM11) | (1 << WGM10) | (1 << COM1A1); // Fast PWM mode
 174:	80 e8       	ldi	r24, 0x80	; 128
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	20 e8       	ldi	r18, 0x80	; 128
 17a:	30 e0       	ldi	r19, 0x00	; 0
 17c:	f9 01       	movw	r30, r18
 17e:	20 81       	ld	r18, Z
 180:	23 68       	ori	r18, 0x83	; 131
 182:	fc 01       	movw	r30, r24
 184:	20 83       	st	Z, r18
	TCCR1B |= (1 << CS11) | (1<<CS10);  // Set prescaler to 64
 186:	81 e8       	ldi	r24, 0x81	; 129
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	21 e8       	ldi	r18, 0x81	; 129
 18c:	30 e0       	ldi	r19, 0x00	; 0
 18e:	f9 01       	movw	r30, r18
 190:	20 81       	ld	r18, Z
 192:	23 60       	ori	r18, 0x03	; 3
 194:	fc 01       	movw	r30, r24
 196:	20 83       	st	Z, r18
	// So the min and max values are
	// OCR1A = 16MHz / (2*64*1000)-1 = 124
	// OCR1A = 16MHz / (2*64*50)-1 = 2499
	
	// Set for 283, so that the starting frequency is 440Hz
	OCR1A = frequency_control;  // Modify this value to adjust the PWM frequency 
 198:	88 e8       	ldi	r24, 0x88	; 136
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1a0:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1a4:	fc 01       	movw	r30, r24
 1a6:	31 83       	std	Z+1, r19	; 0x01
 1a8:	20 83       	st	Z, r18
	
	
	// init AD channels
	// disable channel input buffers
	DIDR0 = 0x01;
 1aa:	8e e7       	ldi	r24, 0x7E	; 126
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	21 e0       	ldi	r18, 0x01	; 1
 1b0:	fc 01       	movw	r30, r24
 1b2:	20 83       	st	Z, r18
	
	// Use Avcc as reference voltage
	ADMUX |= (1<<REFS0);
 1b4:	8c e7       	ldi	r24, 0x7C	; 124
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	2c e7       	ldi	r18, 0x7C	; 124
 1ba:	30 e0       	ldi	r19, 0x00	; 0
 1bc:	f9 01       	movw	r30, r18
 1be:	20 81       	ld	r18, Z
 1c0:	20 64       	ori	r18, 0x40	; 64
 1c2:	fc 01       	movw	r30, r24
 1c4:	20 83       	st	Z, r18
	
	// use 10 bits -> right aligned data ADCSRA[ADLAR] -> 0
	ADMUX &= ~(1<<ADLAR); // reset bit
 1c6:	8c e7       	ldi	r24, 0x7C	; 124
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	2c e7       	ldi	r18, 0x7C	; 124
 1cc:	30 e0       	ldi	r19, 0x00	; 0
 1ce:	f9 01       	movw	r30, r18
 1d0:	20 81       	ld	r18, Z
 1d2:	2f 7d       	andi	r18, 0xDF	; 223
 1d4:	fc 01       	movw	r30, r24
 1d6:	20 83       	st	Z, r18
	
	// clock prescaler 128, ADCSRA [ADPS 2:0] -> 0x111
	ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
 1d8:	8a e7       	ldi	r24, 0x7A	; 122
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	2a e7       	ldi	r18, 0x7A	; 122
 1de:	30 e0       	ldi	r19, 0x00	; 0
 1e0:	f9 01       	movw	r30, r18
 1e2:	20 81       	ld	r18, Z
 1e4:	27 60       	ori	r18, 0x07	; 7
 1e6:	fc 01       	movw	r30, r24
 1e8:	20 83       	st	Z, r18
	
	// Enable interrupts in AD
	ADCSRA |= (1<<ADIE);
 1ea:	8a e7       	ldi	r24, 0x7A	; 122
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	2a e7       	ldi	r18, 0x7A	; 122
 1f0:	30 e0       	ldi	r19, 0x00	; 0
 1f2:	f9 01       	movw	r30, r18
 1f4:	20 81       	ld	r18, Z
 1f6:	28 60       	ori	r18, 0x08	; 8
 1f8:	fc 01       	movw	r30, r24
 1fa:	20 83       	st	Z, r18
	
	// Enable AD converter
	ADCSRA |= (1<<ADEN);
 1fc:	8a e7       	ldi	r24, 0x7A	; 122
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	2a e7       	ldi	r18, 0x7A	; 122
 202:	30 e0       	ldi	r19, 0x00	; 0
 204:	f9 01       	movw	r30, r18
 206:	20 81       	ld	r18, Z
 208:	20 68       	ori	r18, 0x80	; 128
 20a:	fc 01       	movw	r30, r24
 20c:	20 83       	st	Z, r18
	
	
	// Initialize usart
	// Set baud rate
	UBRR0L = (unsigned char)MYUBRR;         // Low byte
 20e:	84 ec       	ldi	r24, 0xC4	; 196
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	27 e6       	ldi	r18, 0x67	; 103
 214:	fc 01       	movw	r30, r24
 216:	20 83       	st	Z, r18
	UBRR0H = (unsigned char)(MYUBRR >> 8);  // High byte
 218:	85 ec       	ldi	r24, 0xC5	; 197
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	fc 01       	movw	r30, r24
 21e:	10 82       	st	Z, r1

	// Enable receiver and transmitter
	UCSR0B |= (1 << RXEN0) | (1 << TXEN0);
 220:	81 ec       	ldi	r24, 0xC1	; 193
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	21 ec       	ldi	r18, 0xC1	; 193
 226:	30 e0       	ldi	r19, 0x00	; 0
 228:	f9 01       	movw	r30, r18
 22a:	20 81       	ld	r18, Z
 22c:	28 61       	ori	r18, 0x18	; 24
 22e:	fc 01       	movw	r30, r24
 230:	20 83       	st	Z, r18

	// Set frame format: 8 data bits, 1 stop bit, no parity
	UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00);
 232:	82 ec       	ldi	r24, 0xC2	; 194
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	22 ec       	ldi	r18, 0xC2	; 194
 238:	30 e0       	ldi	r19, 0x00	; 0
 23a:	f9 01       	movw	r30, r18
 23c:	20 81       	ld	r18, Z
 23e:	26 60       	ori	r18, 0x06	; 6
 240:	fc 01       	movw	r30, r24
 242:	20 83       	st	Z, r18
	
	
	
	
	sei();	// enable interrupts;
 244:	78 94       	sei
	
}
 246:	00 00       	nop
 248:	df 91       	pop	r29
 24a:	cf 91       	pop	r28
 24c:	08 95       	ret

0000024e <update>:



void update(){
 24e:	cf 93       	push	r28
 250:	df 93       	push	r29
 252:	00 d0       	rcall	.+0      	; 0x254 <update+0x6>
 254:	cd b7       	in	r28, 0x3d	; 61
 256:	de b7       	in	r29, 0x3e	; 62
	// Function is called when tick happens and it checks if it is time to run tasks
	// If yes, it changes the run bit to 1
	// It also checks if the task is periodic, and sets delay
	
	int index;
	for(index = 0; index < TASK_MAX; index++){
 258:	1a 82       	std	Y+2, r1	; 0x02
 25a:	19 82       	std	Y+1, r1	; 0x01
 25c:	8f c0       	rjmp	.+286    	; 0x37c <update+0x12e>
		// Checks that there is a task in that index
		if(task_list[index].task_number != 0){
 25e:	29 81       	ldd	r18, Y+1	; 0x01
 260:	3a 81       	ldd	r19, Y+2	; 0x02
 262:	c9 01       	movw	r24, r18
 264:	88 0f       	add	r24, r24
 266:	99 1f       	adc	r25, r25
 268:	82 0f       	add	r24, r18
 26a:	93 1f       	adc	r25, r19
 26c:	88 0f       	add	r24, r24
 26e:	99 1f       	adc	r25, r25
 270:	84 5e       	subi	r24, 0xE4	; 228
 272:	9e 4f       	sbci	r25, 0xFE	; 254
 274:	fc 01       	movw	r30, r24
 276:	80 81       	ld	r24, Z
 278:	88 23       	and	r24, r24
 27a:	09 f4       	brne	.+2      	; 0x27e <update+0x30>
 27c:	7a c0       	rjmp	.+244    	; 0x372 <update+0x124>
			if(task_list[index].delay == 0){
 27e:	29 81       	ldd	r18, Y+1	; 0x01
 280:	3a 81       	ldd	r19, Y+2	; 0x02
 282:	c9 01       	movw	r24, r18
 284:	88 0f       	add	r24, r24
 286:	99 1f       	adc	r25, r25
 288:	82 0f       	add	r24, r18
 28a:	93 1f       	adc	r25, r19
 28c:	88 0f       	add	r24, r24
 28e:	99 1f       	adc	r25, r25
 290:	83 5e       	subi	r24, 0xE3	; 227
 292:	9e 4f       	sbci	r25, 0xFE	; 254
 294:	fc 01       	movw	r30, r24
 296:	80 81       	ld	r24, Z
 298:	91 81       	ldd	r25, Z+1	; 0x01
 29a:	89 2b       	or	r24, r25
 29c:	09 f0       	breq	.+2      	; 0x2a0 <update+0x52>
 29e:	4a c0       	rjmp	.+148    	; 0x334 <update+0xe6>
				task_list[index].run += 1;	// Sets task to be run
 2a0:	29 81       	ldd	r18, Y+1	; 0x01
 2a2:	3a 81       	ldd	r19, Y+2	; 0x02
 2a4:	c9 01       	movw	r24, r18
 2a6:	88 0f       	add	r24, r24
 2a8:	99 1f       	adc	r25, r25
 2aa:	82 0f       	add	r24, r18
 2ac:	93 1f       	adc	r25, r19
 2ae:	88 0f       	add	r24, r24
 2b0:	99 1f       	adc	r25, r25
 2b2:	8f 5d       	subi	r24, 0xDF	; 223
 2b4:	9e 4f       	sbci	r25, 0xFE	; 254
 2b6:	fc 01       	movw	r30, r24
 2b8:	80 81       	ld	r24, Z
 2ba:	8f 5f       	subi	r24, 0xFF	; 255
 2bc:	48 2f       	mov	r20, r24
 2be:	29 81       	ldd	r18, Y+1	; 0x01
 2c0:	3a 81       	ldd	r19, Y+2	; 0x02
 2c2:	c9 01       	movw	r24, r18
 2c4:	88 0f       	add	r24, r24
 2c6:	99 1f       	adc	r25, r25
 2c8:	82 0f       	add	r24, r18
 2ca:	93 1f       	adc	r25, r19
 2cc:	88 0f       	add	r24, r24
 2ce:	99 1f       	adc	r25, r25
 2d0:	8f 5d       	subi	r24, 0xDF	; 223
 2d2:	9e 4f       	sbci	r25, 0xFE	; 254
 2d4:	fc 01       	movw	r30, r24
 2d6:	40 83       	st	Z, r20
				if(task_list[index].interval != 0){
 2d8:	29 81       	ldd	r18, Y+1	; 0x01
 2da:	3a 81       	ldd	r19, Y+2	; 0x02
 2dc:	c9 01       	movw	r24, r18
 2de:	88 0f       	add	r24, r24
 2e0:	99 1f       	adc	r25, r25
 2e2:	82 0f       	add	r24, r18
 2e4:	93 1f       	adc	r25, r19
 2e6:	88 0f       	add	r24, r24
 2e8:	99 1f       	adc	r25, r25
 2ea:	81 5e       	subi	r24, 0xE1	; 225
 2ec:	9e 4f       	sbci	r25, 0xFE	; 254
 2ee:	fc 01       	movw	r30, r24
 2f0:	80 81       	ld	r24, Z
 2f2:	91 81       	ldd	r25, Z+1	; 0x01
 2f4:	89 2b       	or	r24, r25
 2f6:	e9 f1       	breq	.+122    	; 0x372 <update+0x124>
					task_list[index].delay = task_list[index].interval;	// Sets the delay
 2f8:	29 81       	ldd	r18, Y+1	; 0x01
 2fa:	3a 81       	ldd	r19, Y+2	; 0x02
 2fc:	c9 01       	movw	r24, r18
 2fe:	88 0f       	add	r24, r24
 300:	99 1f       	adc	r25, r25
 302:	82 0f       	add	r24, r18
 304:	93 1f       	adc	r25, r19
 306:	88 0f       	add	r24, r24
 308:	99 1f       	adc	r25, r25
 30a:	81 5e       	subi	r24, 0xE1	; 225
 30c:	9e 4f       	sbci	r25, 0xFE	; 254
 30e:	fc 01       	movw	r30, r24
 310:	80 81       	ld	r24, Z
 312:	91 81       	ldd	r25, Z+1	; 0x01
 314:	ac 01       	movw	r20, r24
 316:	29 81       	ldd	r18, Y+1	; 0x01
 318:	3a 81       	ldd	r19, Y+2	; 0x02
 31a:	c9 01       	movw	r24, r18
 31c:	88 0f       	add	r24, r24
 31e:	99 1f       	adc	r25, r25
 320:	82 0f       	add	r24, r18
 322:	93 1f       	adc	r25, r19
 324:	88 0f       	add	r24, r24
 326:	99 1f       	adc	r25, r25
 328:	83 5e       	subi	r24, 0xE3	; 227
 32a:	9e 4f       	sbci	r25, 0xFE	; 254
 32c:	fc 01       	movw	r30, r24
 32e:	51 83       	std	Z+1, r21	; 0x01
 330:	40 83       	st	Z, r20
 332:	1f c0       	rjmp	.+62     	; 0x372 <update+0x124>
				}
			}
			// If it is not time yet for the task, reduces delay by 1 tick
			else{
				task_list[index].delay -= 1;
 334:	29 81       	ldd	r18, Y+1	; 0x01
 336:	3a 81       	ldd	r19, Y+2	; 0x02
 338:	c9 01       	movw	r24, r18
 33a:	88 0f       	add	r24, r24
 33c:	99 1f       	adc	r25, r25
 33e:	82 0f       	add	r24, r18
 340:	93 1f       	adc	r25, r19
 342:	88 0f       	add	r24, r24
 344:	99 1f       	adc	r25, r25
 346:	83 5e       	subi	r24, 0xE3	; 227
 348:	9e 4f       	sbci	r25, 0xFE	; 254
 34a:	fc 01       	movw	r30, r24
 34c:	80 81       	ld	r24, Z
 34e:	91 81       	ldd	r25, Z+1	; 0x01
 350:	ac 01       	movw	r20, r24
 352:	41 50       	subi	r20, 0x01	; 1
 354:	51 09       	sbc	r21, r1
 356:	29 81       	ldd	r18, Y+1	; 0x01
 358:	3a 81       	ldd	r19, Y+2	; 0x02
 35a:	c9 01       	movw	r24, r18
 35c:	88 0f       	add	r24, r24
 35e:	99 1f       	adc	r25, r25
 360:	82 0f       	add	r24, r18
 362:	93 1f       	adc	r25, r19
 364:	88 0f       	add	r24, r24
 366:	99 1f       	adc	r25, r25
 368:	83 5e       	subi	r24, 0xE3	; 227
 36a:	9e 4f       	sbci	r25, 0xFE	; 254
 36c:	fc 01       	movw	r30, r24
 36e:	51 83       	std	Z+1, r21	; 0x01
 370:	40 83       	st	Z, r20
	// Function is called when tick happens and it checks if it is time to run tasks
	// If yes, it changes the run bit to 1
	// It also checks if the task is periodic, and sets delay
	
	int index;
	for(index = 0; index < TASK_MAX; index++){
 372:	89 81       	ldd	r24, Y+1	; 0x01
 374:	9a 81       	ldd	r25, Y+2	; 0x02
 376:	01 96       	adiw	r24, 0x01	; 1
 378:	9a 83       	std	Y+2, r25	; 0x02
 37a:	89 83       	std	Y+1, r24	; 0x01
 37c:	89 81       	ldd	r24, Y+1	; 0x01
 37e:	9a 81       	ldd	r25, Y+2	; 0x02
 380:	02 97       	sbiw	r24, 0x02	; 2
 382:	0c f4       	brge	.+2      	; 0x386 <update+0x138>
 384:	6c cf       	rjmp	.-296    	; 0x25e <update+0x10>
			else{
				task_list[index].delay -= 1;
			}
		}
	}
}
 386:	00 00       	nop
 388:	0f 90       	pop	r0
 38a:	0f 90       	pop	r0
 38c:	df 91       	pop	r29
 38e:	cf 91       	pop	r28
 390:	08 95       	ret

00000392 <send_string_direct>:



// Transmits strings with polling
void send_string_direct(const char *str) {
 392:	cf 93       	push	r28
 394:	df 93       	push	r29
 396:	00 d0       	rcall	.+0      	; 0x398 <send_string_direct+0x6>
 398:	cd b7       	in	r28, 0x3d	; 61
 39a:	de b7       	in	r29, 0x3e	; 62
 39c:	9a 83       	std	Y+2, r25	; 0x02
 39e:	89 83       	std	Y+1, r24	; 0x01
	while(*str) {
 3a0:	18 c0       	rjmp	.+48     	; 0x3d2 <send_string_direct+0x40>
		
		while (!(UCSR0A & (1 << UDRE0)));
 3a2:	00 00       	nop
 3a4:	80 ec       	ldi	r24, 0xC0	; 192
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	fc 01       	movw	r30, r24
 3aa:	80 81       	ld	r24, Z
 3ac:	88 2f       	mov	r24, r24
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	80 72       	andi	r24, 0x20	; 32
 3b2:	99 27       	eor	r25, r25
 3b4:	89 2b       	or	r24, r25
 3b6:	b1 f3       	breq	.-20     	; 0x3a4 <send_string_direct+0x12>
		// Put data into the buffer, which sends the data
		UDR0 = *str++;
 3b8:	26 ec       	ldi	r18, 0xC6	; 198
 3ba:	30 e0       	ldi	r19, 0x00	; 0
 3bc:	89 81       	ldd	r24, Y+1	; 0x01
 3be:	9a 81       	ldd	r25, Y+2	; 0x02
 3c0:	ac 01       	movw	r20, r24
 3c2:	4f 5f       	subi	r20, 0xFF	; 255
 3c4:	5f 4f       	sbci	r21, 0xFF	; 255
 3c6:	5a 83       	std	Y+2, r21	; 0x02
 3c8:	49 83       	std	Y+1, r20	; 0x01
 3ca:	fc 01       	movw	r30, r24
 3cc:	80 81       	ld	r24, Z
 3ce:	f9 01       	movw	r30, r18
 3d0:	80 83       	st	Z, r24



// Transmits strings with polling
void send_string_direct(const char *str) {
	while(*str) {
 3d2:	89 81       	ldd	r24, Y+1	; 0x01
 3d4:	9a 81       	ldd	r25, Y+2	; 0x02
 3d6:	fc 01       	movw	r30, r24
 3d8:	80 81       	ld	r24, Z
 3da:	88 23       	and	r24, r24
 3dc:	11 f7       	brne	.-60     	; 0x3a2 <send_string_direct+0x10>
		
		while (!(UCSR0A & (1 << UDRE0)));
		// Put data into the buffer, which sends the data
		UDR0 = *str++;
	}
}
 3de:	00 00       	nop
 3e0:	0f 90       	pop	r0
 3e2:	0f 90       	pop	r0
 3e4:	df 91       	pop	r29
 3e6:	cf 91       	pop	r28
 3e8:	08 95       	ret

000003ea <__vector_9>:


#define OVF_MAX 156	// With 8-bit timer with a prescaler of 8, 156 gives 20ms tick
uint16_t overflows=0;

ISR (TIMER2_OVF_vect) {
 3ea:	1f 92       	push	r1
 3ec:	0f 92       	push	r0
 3ee:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 3f2:	0f 92       	push	r0
 3f4:	11 24       	eor	r1, r1
 3f6:	2f 93       	push	r18
 3f8:	3f 93       	push	r19
 3fa:	4f 93       	push	r20
 3fc:	5f 93       	push	r21
 3fe:	6f 93       	push	r22
 400:	7f 93       	push	r23
 402:	8f 93       	push	r24
 404:	9f 93       	push	r25
 406:	af 93       	push	r26
 408:	bf 93       	push	r27
 40a:	ef 93       	push	r30
 40c:	ff 93       	push	r31
 40e:	cf 93       	push	r28
 410:	df 93       	push	r29
 412:	cd b7       	in	r28, 0x3d	; 61
 414:	de b7       	in	r29, 0x3e	; 62
	if(overflows++ >= OVF_MAX) {
 416:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end>
 41a:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <__data_end+0x1>
 41e:	9c 01       	movw	r18, r24
 420:	2f 5f       	subi	r18, 0xFF	; 255
 422:	3f 4f       	sbci	r19, 0xFF	; 255
 424:	30 93 1b 01 	sts	0x011B, r19	; 0x80011b <__data_end+0x1>
 428:	20 93 1a 01 	sts	0x011A, r18	; 0x80011a <__data_end>
 42c:	8c 39       	cpi	r24, 0x9C	; 156
 42e:	91 05       	cpc	r25, r1
 430:	30 f0       	brcs	.+12     	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
		update();
 432:	0e 94 27 01 	call	0x24e	; 0x24e <update>
		overflows = 0;
 436:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <__data_end+0x1>
 43a:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <__data_end>
	}
}
 43e:	00 00       	nop
 440:	df 91       	pop	r29
 442:	cf 91       	pop	r28
 444:	ff 91       	pop	r31
 446:	ef 91       	pop	r30
 448:	bf 91       	pop	r27
 44a:	af 91       	pop	r26
 44c:	9f 91       	pop	r25
 44e:	8f 91       	pop	r24
 450:	7f 91       	pop	r23
 452:	6f 91       	pop	r22
 454:	5f 91       	pop	r21
 456:	4f 91       	pop	r20
 458:	3f 91       	pop	r19
 45a:	2f 91       	pop	r18
 45c:	0f 90       	pop	r0
 45e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 462:	0f 90       	pop	r0
 464:	1f 90       	pop	r1
 466:	18 95       	reti

00000468 <add_task>:



void add_task(uint8_t number, uint8_t task_number, int16_t delay, int16_t interval){
 468:	cf 93       	push	r28
 46a:	df 93       	push	r29
 46c:	00 d0       	rcall	.+0      	; 0x46e <add_task+0x6>
 46e:	00 d0       	rcall	.+0      	; 0x470 <add_task+0x8>
 470:	00 d0       	rcall	.+0      	; 0x472 <add_task+0xa>
 472:	cd b7       	in	r28, 0x3d	; 61
 474:	de b7       	in	r29, 0x3e	; 62
 476:	89 83       	std	Y+1, r24	; 0x01
 478:	6a 83       	std	Y+2, r22	; 0x02
 47a:	5c 83       	std	Y+4, r21	; 0x04
 47c:	4b 83       	std	Y+3, r20	; 0x03
 47e:	3e 83       	std	Y+6, r19	; 0x06
 480:	2d 83       	std	Y+5, r18	; 0x05
	// Function that adds tasks to the struct	
	task_list[number].task_number = task_number;
 482:	89 81       	ldd	r24, Y+1	; 0x01
 484:	28 2f       	mov	r18, r24
 486:	30 e0       	ldi	r19, 0x00	; 0
 488:	c9 01       	movw	r24, r18
 48a:	88 0f       	add	r24, r24
 48c:	99 1f       	adc	r25, r25
 48e:	82 0f       	add	r24, r18
 490:	93 1f       	adc	r25, r19
 492:	88 0f       	add	r24, r24
 494:	99 1f       	adc	r25, r25
 496:	84 5e       	subi	r24, 0xE4	; 228
 498:	9e 4f       	sbci	r25, 0xFE	; 254
 49a:	2a 81       	ldd	r18, Y+2	; 0x02
 49c:	fc 01       	movw	r30, r24
 49e:	20 83       	st	Z, r18
	task_list[number].delay = delay;
 4a0:	89 81       	ldd	r24, Y+1	; 0x01
 4a2:	28 2f       	mov	r18, r24
 4a4:	30 e0       	ldi	r19, 0x00	; 0
 4a6:	c9 01       	movw	r24, r18
 4a8:	88 0f       	add	r24, r24
 4aa:	99 1f       	adc	r25, r25
 4ac:	82 0f       	add	r24, r18
 4ae:	93 1f       	adc	r25, r19
 4b0:	88 0f       	add	r24, r24
 4b2:	99 1f       	adc	r25, r25
 4b4:	83 5e       	subi	r24, 0xE3	; 227
 4b6:	9e 4f       	sbci	r25, 0xFE	; 254
 4b8:	2b 81       	ldd	r18, Y+3	; 0x03
 4ba:	3c 81       	ldd	r19, Y+4	; 0x04
 4bc:	fc 01       	movw	r30, r24
 4be:	31 83       	std	Z+1, r19	; 0x01
 4c0:	20 83       	st	Z, r18
	task_list[number].interval = interval;
 4c2:	89 81       	ldd	r24, Y+1	; 0x01
 4c4:	28 2f       	mov	r18, r24
 4c6:	30 e0       	ldi	r19, 0x00	; 0
 4c8:	4d 81       	ldd	r20, Y+5	; 0x05
 4ca:	5e 81       	ldd	r21, Y+6	; 0x06
 4cc:	c9 01       	movw	r24, r18
 4ce:	88 0f       	add	r24, r24
 4d0:	99 1f       	adc	r25, r25
 4d2:	82 0f       	add	r24, r18
 4d4:	93 1f       	adc	r25, r19
 4d6:	88 0f       	add	r24, r24
 4d8:	99 1f       	adc	r25, r25
 4da:	81 5e       	subi	r24, 0xE1	; 225
 4dc:	9e 4f       	sbci	r25, 0xFE	; 254
 4de:	fc 01       	movw	r30, r24
 4e0:	51 83       	std	Z+1, r21	; 0x01
 4e2:	40 83       	st	Z, r20
}
 4e4:	00 00       	nop
 4e6:	26 96       	adiw	r28, 0x06	; 6
 4e8:	0f b6       	in	r0, 0x3f	; 63
 4ea:	f8 94       	cli
 4ec:	de bf       	out	0x3e, r29	; 62
 4ee:	0f be       	out	0x3f, r0	; 63
 4f0:	cd bf       	out	0x3d, r28	; 61
 4f2:	df 91       	pop	r29
 4f4:	cf 91       	pop	r28
 4f6:	08 95       	ret

000004f8 <init_tasks>:



void init_tasks(){
 4f8:	cf 93       	push	r28
 4fa:	df 93       	push	r29
 4fc:	00 d0       	rcall	.+0      	; 0x4fe <init_tasks+0x6>
 4fe:	cd b7       	in	r28, 0x3d	; 61
 500:	de b7       	in	r29, 0x3e	; 62
	// Initializes task and gives them number, delay, and how often they are repeated(interval)
	int index;
	for(index = 0; index < TASK_MAX; index++){
 502:	1a 82       	std	Y+2, r1	; 0x02
 504:	19 82       	std	Y+1, r1	; 0x01
 506:	22 c0       	rjmp	.+68     	; 0x54c <init_tasks+0x54>
		task_list[index].task_number = 0;
 508:	29 81       	ldd	r18, Y+1	; 0x01
 50a:	3a 81       	ldd	r19, Y+2	; 0x02
 50c:	c9 01       	movw	r24, r18
 50e:	88 0f       	add	r24, r24
 510:	99 1f       	adc	r25, r25
 512:	82 0f       	add	r24, r18
 514:	93 1f       	adc	r25, r19
 516:	88 0f       	add	r24, r24
 518:	99 1f       	adc	r25, r25
 51a:	84 5e       	subi	r24, 0xE4	; 228
 51c:	9e 4f       	sbci	r25, 0xFE	; 254
 51e:	fc 01       	movw	r30, r24
 520:	10 82       	st	Z, r1
		
		add_task(0, ADC_TASK, 0, 100);		// Reads adc 5 times a second
 522:	24 e6       	ldi	r18, 0x64	; 100
 524:	30 e0       	ldi	r19, 0x00	; 0
 526:	40 e0       	ldi	r20, 0x00	; 0
 528:	50 e0       	ldi	r21, 0x00	; 0
 52a:	61 e0       	ldi	r22, 0x01	; 1
 52c:	80 e0       	ldi	r24, 0x00	; 0
 52e:	0e 94 34 02 	call	0x468	; 0x468 <add_task>
		add_task(1, FREQ_TASK, 50, 100);		// Sends text to virtual terminal every 2s
 532:	24 e6       	ldi	r18, 0x64	; 100
 534:	30 e0       	ldi	r19, 0x00	; 0
 536:	42 e3       	ldi	r20, 0x32	; 50
 538:	50 e0       	ldi	r21, 0x00	; 0
 53a:	62 e0       	ldi	r22, 0x02	; 2
 53c:	81 e0       	ldi	r24, 0x01	; 1
 53e:	0e 94 34 02 	call	0x468	; 0x468 <add_task>


void init_tasks(){
	// Initializes task and gives them number, delay, and how often they are repeated(interval)
	int index;
	for(index = 0; index < TASK_MAX; index++){
 542:	89 81       	ldd	r24, Y+1	; 0x01
 544:	9a 81       	ldd	r25, Y+2	; 0x02
 546:	01 96       	adiw	r24, 0x01	; 1
 548:	9a 83       	std	Y+2, r25	; 0x02
 54a:	89 83       	std	Y+1, r24	; 0x01
 54c:	89 81       	ldd	r24, Y+1	; 0x01
 54e:	9a 81       	ldd	r25, Y+2	; 0x02
 550:	02 97       	sbiw	r24, 0x02	; 2
 552:	d4 f2       	brlt	.-76     	; 0x508 <init_tasks+0x10>
		task_list[index].task_number = 0;
		
		add_task(0, ADC_TASK, 0, 100);		// Reads adc 5 times a second
		add_task(1, FREQ_TASK, 50, 100);		// Sends text to virtual terminal every 2s
	}
}
 554:	00 00       	nop
 556:	0f 90       	pop	r0
 558:	0f 90       	pop	r0
 55a:	df 91       	pop	r29
 55c:	cf 91       	pop	r28
 55e:	08 95       	ret

00000560 <task_1>:



void task_1(){
 560:	cf 93       	push	r28
 562:	df 93       	push	r29
 564:	cd b7       	in	r28, 0x3d	; 61
 566:	de b7       	in	r29, 0x3e	; 62
	// Does the ADC
	// Select ADC0 to read
	ADMUX = (ADMUX & 0xF0) | (0x00 & 0x0F);
 568:	8c e7       	ldi	r24, 0x7C	; 124
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	2c e7       	ldi	r18, 0x7C	; 124
 56e:	30 e0       	ldi	r19, 0x00	; 0
 570:	f9 01       	movw	r30, r18
 572:	20 81       	ld	r18, Z
 574:	20 7f       	andi	r18, 0xF0	; 240
 576:	fc 01       	movw	r30, r24
 578:	20 83       	st	Z, r18
	
	// start conversion by setting ADCSRA[ADSC] -> 1
	ADCSRA |= (1<<ADSC);
 57a:	8a e7       	ldi	r24, 0x7A	; 122
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	2a e7       	ldi	r18, 0x7A	; 122
 580:	30 e0       	ldi	r19, 0x00	; 0
 582:	f9 01       	movw	r30, r18
 584:	20 81       	ld	r18, Z
 586:	20 64       	ori	r18, 0x40	; 64
 588:	fc 01       	movw	r30, r24
 58a:	20 83       	st	Z, r18
}
 58c:	00 00       	nop
 58e:	df 91       	pop	r29
 590:	cf 91       	pop	r28
 592:	08 95       	ret

00000594 <task_2>:



void task_2(){
 594:	cf 93       	push	r28
 596:	df 93       	push	r29
 598:	cd b7       	in	r28, 0x3d	; 61
 59a:	de b7       	in	r29, 0x3e	; 62
 59c:	61 97       	sbiw	r28, 0x11	; 17
 59e:	0f b6       	in	r0, 0x3f	; 63
 5a0:	f8 94       	cli
 5a2:	de bf       	out	0x3e, r29	; 62
 5a4:	0f be       	out	0x3f, r0	; 63
 5a6:	cd bf       	out	0x3d, r28	; 61
	send_string_direct(msg); // Send the constant string
 5a8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <msg>
 5ac:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <msg+0x1>
 5b0:	0e 94 c9 01 	call	0x392	; 0x392 <send_string_direct>
	
	
	// Converts the result from int to char array
	char str[10];
	int i = 0;
 5b4:	1a 82       	std	Y+2, r1	; 0x02
 5b6:	19 82       	std	Y+1, r1	; 0x01

	// Convert number to string (in reverse order)
	do {
		str[i++] = (conversion_result % 10) + '0';
 5b8:	49 81       	ldd	r20, Y+1	; 0x01
 5ba:	5a 81       	ldd	r21, Y+2	; 0x02
 5bc:	ca 01       	movw	r24, r20
 5be:	01 96       	adiw	r24, 0x01	; 1
 5c0:	9a 83       	std	Y+2, r25	; 0x02
 5c2:	89 83       	std	Y+1, r24	; 0x01
 5c4:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <conversion_result>
 5c8:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <conversion_result+0x1>
 5cc:	9f 01       	movw	r18, r30
 5ce:	ad ec       	ldi	r26, 0xCD	; 205
 5d0:	bc ec       	ldi	r27, 0xCC	; 204
 5d2:	0e 94 bf 04 	call	0x97e	; 0x97e <__umulhisi3>
 5d6:	96 95       	lsr	r25
 5d8:	87 95       	ror	r24
 5da:	96 95       	lsr	r25
 5dc:	87 95       	ror	r24
 5de:	96 95       	lsr	r25
 5e0:	87 95       	ror	r24
 5e2:	88 0f       	add	r24, r24
 5e4:	99 1f       	adc	r25, r25
 5e6:	9c 01       	movw	r18, r24
 5e8:	22 0f       	add	r18, r18
 5ea:	33 1f       	adc	r19, r19
 5ec:	22 0f       	add	r18, r18
 5ee:	33 1f       	adc	r19, r19
 5f0:	82 0f       	add	r24, r18
 5f2:	93 1f       	adc	r25, r19
 5f4:	9f 01       	movw	r18, r30
 5f6:	28 1b       	sub	r18, r24
 5f8:	39 0b       	sbc	r19, r25
 5fa:	c9 01       	movw	r24, r18
 5fc:	20 e3       	ldi	r18, 0x30	; 48
 5fe:	28 0f       	add	r18, r24
 600:	ce 01       	movw	r24, r28
 602:	08 96       	adiw	r24, 0x08	; 8
 604:	84 0f       	add	r24, r20
 606:	95 1f       	adc	r25, r21
 608:	fc 01       	movw	r30, r24
 60a:	20 83       	st	Z, r18
		conversion_result /= 10;
 60c:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <conversion_result>
 610:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <conversion_result+0x1>
 614:	9c 01       	movw	r18, r24
 616:	ad ec       	ldi	r26, 0xCD	; 205
 618:	bc ec       	ldi	r27, 0xCC	; 204
 61a:	0e 94 bf 04 	call	0x97e	; 0x97e <__umulhisi3>
 61e:	96 95       	lsr	r25
 620:	87 95       	ror	r24
 622:	96 95       	lsr	r25
 624:	87 95       	ror	r24
 626:	96 95       	lsr	r25
 628:	87 95       	ror	r24
 62a:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <conversion_result+0x1>
 62e:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <conversion_result>
	} while (conversion_result > 0);
 632:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <conversion_result>
 636:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <conversion_result+0x1>
 63a:	89 2b       	or	r24, r25
 63c:	09 f0       	breq	.+2      	; 0x640 <task_2+0xac>
 63e:	bc cf       	rjmp	.-136    	; 0x5b8 <task_2+0x24>

	// Null-terminate the string
	str[i] = '\0';
 640:	9e 01       	movw	r18, r28
 642:	28 5f       	subi	r18, 0xF8	; 248
 644:	3f 4f       	sbci	r19, 0xFF	; 255
 646:	89 81       	ldd	r24, Y+1	; 0x01
 648:	9a 81       	ldd	r25, Y+2	; 0x02
 64a:	82 0f       	add	r24, r18
 64c:	93 1f       	adc	r25, r19
 64e:	fc 01       	movw	r30, r24
 650:	10 82       	st	Z, r1

	// Reverse the string
	for (int j = 0, k = i - 1; j < k; j++, k--) {
 652:	1c 82       	std	Y+4, r1	; 0x04
 654:	1b 82       	std	Y+3, r1	; 0x03
 656:	89 81       	ldd	r24, Y+1	; 0x01
 658:	9a 81       	ldd	r25, Y+2	; 0x02
 65a:	01 97       	sbiw	r24, 0x01	; 1
 65c:	9e 83       	std	Y+6, r25	; 0x06
 65e:	8d 83       	std	Y+5, r24	; 0x05
 660:	30 c0       	rjmp	.+96     	; 0x6c2 <task_2+0x12e>
		char temp = str[j];
 662:	9e 01       	movw	r18, r28
 664:	28 5f       	subi	r18, 0xF8	; 248
 666:	3f 4f       	sbci	r19, 0xFF	; 255
 668:	8b 81       	ldd	r24, Y+3	; 0x03
 66a:	9c 81       	ldd	r25, Y+4	; 0x04
 66c:	82 0f       	add	r24, r18
 66e:	93 1f       	adc	r25, r19
 670:	fc 01       	movw	r30, r24
 672:	80 81       	ld	r24, Z
 674:	8f 83       	std	Y+7, r24	; 0x07
		str[j] = str[k];
 676:	9e 01       	movw	r18, r28
 678:	28 5f       	subi	r18, 0xF8	; 248
 67a:	3f 4f       	sbci	r19, 0xFF	; 255
 67c:	8d 81       	ldd	r24, Y+5	; 0x05
 67e:	9e 81       	ldd	r25, Y+6	; 0x06
 680:	82 0f       	add	r24, r18
 682:	93 1f       	adc	r25, r19
 684:	fc 01       	movw	r30, r24
 686:	40 81       	ld	r20, Z
 688:	9e 01       	movw	r18, r28
 68a:	28 5f       	subi	r18, 0xF8	; 248
 68c:	3f 4f       	sbci	r19, 0xFF	; 255
 68e:	8b 81       	ldd	r24, Y+3	; 0x03
 690:	9c 81       	ldd	r25, Y+4	; 0x04
 692:	82 0f       	add	r24, r18
 694:	93 1f       	adc	r25, r19
 696:	fc 01       	movw	r30, r24
 698:	40 83       	st	Z, r20
		str[k] = temp;
 69a:	9e 01       	movw	r18, r28
 69c:	28 5f       	subi	r18, 0xF8	; 248
 69e:	3f 4f       	sbci	r19, 0xFF	; 255
 6a0:	8d 81       	ldd	r24, Y+5	; 0x05
 6a2:	9e 81       	ldd	r25, Y+6	; 0x06
 6a4:	82 0f       	add	r24, r18
 6a6:	93 1f       	adc	r25, r19
 6a8:	2f 81       	ldd	r18, Y+7	; 0x07
 6aa:	fc 01       	movw	r30, r24
 6ac:	20 83       	st	Z, r18

	// Null-terminate the string
	str[i] = '\0';

	// Reverse the string
	for (int j = 0, k = i - 1; j < k; j++, k--) {
 6ae:	8b 81       	ldd	r24, Y+3	; 0x03
 6b0:	9c 81       	ldd	r25, Y+4	; 0x04
 6b2:	01 96       	adiw	r24, 0x01	; 1
 6b4:	9c 83       	std	Y+4, r25	; 0x04
 6b6:	8b 83       	std	Y+3, r24	; 0x03
 6b8:	8d 81       	ldd	r24, Y+5	; 0x05
 6ba:	9e 81       	ldd	r25, Y+6	; 0x06
 6bc:	01 97       	sbiw	r24, 0x01	; 1
 6be:	9e 83       	std	Y+6, r25	; 0x06
 6c0:	8d 83       	std	Y+5, r24	; 0x05
 6c2:	2b 81       	ldd	r18, Y+3	; 0x03
 6c4:	3c 81       	ldd	r19, Y+4	; 0x04
 6c6:	8d 81       	ldd	r24, Y+5	; 0x05
 6c8:	9e 81       	ldd	r25, Y+6	; 0x06
 6ca:	28 17       	cp	r18, r24
 6cc:	39 07       	cpc	r19, r25
 6ce:	4c f2       	brlt	.-110    	; 0x662 <task_2+0xce>
		str[k] = temp;
	}
	
	
	
	send_string_direct(str); // Send the string one character at a time
 6d0:	ce 01       	movw	r24, r28
 6d2:	08 96       	adiw	r24, 0x08	; 8
 6d4:	0e 94 c9 01 	call	0x392	; 0x392 <send_string_direct>
	send_string_direct(end_msg); // Send the string one character at a time
 6d8:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <end_msg>
 6dc:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <end_msg+0x1>
 6e0:	0e 94 c9 01 	call	0x392	; 0x392 <send_string_direct>
}
 6e4:	00 00       	nop
 6e6:	61 96       	adiw	r28, 0x11	; 17
 6e8:	0f b6       	in	r0, 0x3f	; 63
 6ea:	f8 94       	cli
 6ec:	de bf       	out	0x3e, r29	; 62
 6ee:	0f be       	out	0x3f, r0	; 63
 6f0:	cd bf       	out	0x3d, r28	; 61
 6f2:	df 91       	pop	r29
 6f4:	cf 91       	pop	r28
 6f6:	08 95       	ret

000006f8 <task_manager>:



void task_manager(){
 6f8:	cf 93       	push	r28
 6fa:	df 93       	push	r29
 6fc:	00 d0       	rcall	.+0      	; 0x6fe <task_manager+0x6>
 6fe:	cd b7       	in	r28, 0x3d	; 61
 700:	de b7       	in	r29, 0x3e	; 62
	// Checks the run bits from every task, and runs them if needed
	int index;
	for(index = 0; index < TASK_MAX; index++){
 702:	1a 82       	std	Y+2, r1	; 0x02
 704:	19 82       	std	Y+1, r1	; 0x01
 706:	64 c0       	rjmp	.+200    	; 0x7d0 <task_manager+0xd8>
		// Checks that there is a task in that index
		if(task_list[index].task_number != 0){
 708:	29 81       	ldd	r18, Y+1	; 0x01
 70a:	3a 81       	ldd	r19, Y+2	; 0x02
 70c:	c9 01       	movw	r24, r18
 70e:	88 0f       	add	r24, r24
 710:	99 1f       	adc	r25, r25
 712:	82 0f       	add	r24, r18
 714:	93 1f       	adc	r25, r19
 716:	88 0f       	add	r24, r24
 718:	99 1f       	adc	r25, r25
 71a:	84 5e       	subi	r24, 0xE4	; 228
 71c:	9e 4f       	sbci	r25, 0xFE	; 254
 71e:	fc 01       	movw	r30, r24
 720:	80 81       	ld	r24, Z
 722:	88 23       	and	r24, r24
 724:	09 f4       	brne	.+2      	; 0x728 <task_manager+0x30>
 726:	4f c0       	rjmp	.+158    	; 0x7c6 <task_manager+0xce>
			if(task_list[index].run > 0){
 728:	29 81       	ldd	r18, Y+1	; 0x01
 72a:	3a 81       	ldd	r19, Y+2	; 0x02
 72c:	c9 01       	movw	r24, r18
 72e:	88 0f       	add	r24, r24
 730:	99 1f       	adc	r25, r25
 732:	82 0f       	add	r24, r18
 734:	93 1f       	adc	r25, r19
 736:	88 0f       	add	r24, r24
 738:	99 1f       	adc	r25, r25
 73a:	8f 5d       	subi	r24, 0xDF	; 223
 73c:	9e 4f       	sbci	r25, 0xFE	; 254
 73e:	fc 01       	movw	r30, r24
 740:	80 81       	ld	r24, Z
 742:	18 16       	cp	r1, r24
 744:	0c f0       	brlt	.+2      	; 0x748 <task_manager+0x50>
 746:	3f c0       	rjmp	.+126    	; 0x7c6 <task_manager+0xce>
				
				if(task_list[index].task_number == ADC_TASK) task_1();
 748:	29 81       	ldd	r18, Y+1	; 0x01
 74a:	3a 81       	ldd	r19, Y+2	; 0x02
 74c:	c9 01       	movw	r24, r18
 74e:	88 0f       	add	r24, r24
 750:	99 1f       	adc	r25, r25
 752:	82 0f       	add	r24, r18
 754:	93 1f       	adc	r25, r19
 756:	88 0f       	add	r24, r24
 758:	99 1f       	adc	r25, r25
 75a:	84 5e       	subi	r24, 0xE4	; 228
 75c:	9e 4f       	sbci	r25, 0xFE	; 254
 75e:	fc 01       	movw	r30, r24
 760:	80 81       	ld	r24, Z
 762:	81 30       	cpi	r24, 0x01	; 1
 764:	19 f4       	brne	.+6      	; 0x76c <task_manager+0x74>
 766:	0e 94 b0 02 	call	0x560	; 0x560 <task_1>
 76a:	11 c0       	rjmp	.+34     	; 0x78e <task_manager+0x96>
				else if(task_list[index].task_number == FREQ_TASK) task_2();
 76c:	29 81       	ldd	r18, Y+1	; 0x01
 76e:	3a 81       	ldd	r19, Y+2	; 0x02
 770:	c9 01       	movw	r24, r18
 772:	88 0f       	add	r24, r24
 774:	99 1f       	adc	r25, r25
 776:	82 0f       	add	r24, r18
 778:	93 1f       	adc	r25, r19
 77a:	88 0f       	add	r24, r24
 77c:	99 1f       	adc	r25, r25
 77e:	84 5e       	subi	r24, 0xE4	; 228
 780:	9e 4f       	sbci	r25, 0xFE	; 254
 782:	fc 01       	movw	r30, r24
 784:	80 81       	ld	r24, Z
 786:	82 30       	cpi	r24, 0x02	; 2
 788:	11 f4       	brne	.+4      	; 0x78e <task_manager+0x96>
 78a:	0e 94 ca 02 	call	0x594	; 0x594 <task_2>
				task_list[index].run -= 1;
 78e:	29 81       	ldd	r18, Y+1	; 0x01
 790:	3a 81       	ldd	r19, Y+2	; 0x02
 792:	c9 01       	movw	r24, r18
 794:	88 0f       	add	r24, r24
 796:	99 1f       	adc	r25, r25
 798:	82 0f       	add	r24, r18
 79a:	93 1f       	adc	r25, r19
 79c:	88 0f       	add	r24, r24
 79e:	99 1f       	adc	r25, r25
 7a0:	8f 5d       	subi	r24, 0xDF	; 223
 7a2:	9e 4f       	sbci	r25, 0xFE	; 254
 7a4:	fc 01       	movw	r30, r24
 7a6:	80 81       	ld	r24, Z
 7a8:	81 50       	subi	r24, 0x01	; 1
 7aa:	48 2f       	mov	r20, r24
 7ac:	29 81       	ldd	r18, Y+1	; 0x01
 7ae:	3a 81       	ldd	r19, Y+2	; 0x02
 7b0:	c9 01       	movw	r24, r18
 7b2:	88 0f       	add	r24, r24
 7b4:	99 1f       	adc	r25, r25
 7b6:	82 0f       	add	r24, r18
 7b8:	93 1f       	adc	r25, r19
 7ba:	88 0f       	add	r24, r24
 7bc:	99 1f       	adc	r25, r25
 7be:	8f 5d       	subi	r24, 0xDF	; 223
 7c0:	9e 4f       	sbci	r25, 0xFE	; 254
 7c2:	fc 01       	movw	r30, r24
 7c4:	40 83       	st	Z, r20


void task_manager(){
	// Checks the run bits from every task, and runs them if needed
	int index;
	for(index = 0; index < TASK_MAX; index++){
 7c6:	89 81       	ldd	r24, Y+1	; 0x01
 7c8:	9a 81       	ldd	r25, Y+2	; 0x02
 7ca:	01 96       	adiw	r24, 0x01	; 1
 7cc:	9a 83       	std	Y+2, r25	; 0x02
 7ce:	89 83       	std	Y+1, r24	; 0x01
 7d0:	89 81       	ldd	r24, Y+1	; 0x01
 7d2:	9a 81       	ldd	r25, Y+2	; 0x02
 7d4:	02 97       	sbiw	r24, 0x02	; 2
 7d6:	0c f4       	brge	.+2      	; 0x7da <task_manager+0xe2>
 7d8:	97 cf       	rjmp	.-210    	; 0x708 <task_manager+0x10>
				else if(task_list[index].task_number == FREQ_TASK) task_2();
				task_list[index].run -= 1;
			}
		}
	}
}
 7da:	00 00       	nop
 7dc:	0f 90       	pop	r0
 7de:	0f 90       	pop	r0
 7e0:	df 91       	pop	r29
 7e2:	cf 91       	pop	r28
 7e4:	08 95       	ret

000007e6 <go_sleep>:



void go_sleep(){
 7e6:	cf 93       	push	r28
 7e8:	df 93       	push	r29
 7ea:	cd b7       	in	r28, 0x3d	; 61
 7ec:	de b7       	in	r29, 0x3e	; 62
	// Sets system to sleep on standby mode
	set_sleep_mode(SLEEP_MODE_STANDBY);
 7ee:	83 e5       	ldi	r24, 0x53	; 83
 7f0:	90 e0       	ldi	r25, 0x00	; 0
 7f2:	23 e5       	ldi	r18, 0x53	; 83
 7f4:	30 e0       	ldi	r19, 0x00	; 0
 7f6:	f9 01       	movw	r30, r18
 7f8:	20 81       	ld	r18, Z
 7fa:	21 7f       	andi	r18, 0xF1	; 241
 7fc:	2c 60       	ori	r18, 0x0C	; 12
 7fe:	fc 01       	movw	r30, r24
 800:	20 83       	st	Z, r18
	cli();
 802:	f8 94       	cli
	// Turn of the led
	
	sleep_enable();	// Sets SE-bit
 804:	83 e5       	ldi	r24, 0x53	; 83
 806:	90 e0       	ldi	r25, 0x00	; 0
 808:	23 e5       	ldi	r18, 0x53	; 83
 80a:	30 e0       	ldi	r19, 0x00	; 0
 80c:	f9 01       	movw	r30, r18
 80e:	20 81       	ld	r18, Z
 810:	21 60       	ori	r18, 0x01	; 1
 812:	fc 01       	movw	r30, r24
 814:	20 83       	st	Z, r18
	sei();			// Enable interrupts
 816:	78 94       	sei
	sleep_cpu();	// Sleep-instruction
 818:	88 95       	sleep
	
	// When the button is released the system starts again
	sleep_disable();
 81a:	83 e5       	ldi	r24, 0x53	; 83
 81c:	90 e0       	ldi	r25, 0x00	; 0
 81e:	23 e5       	ldi	r18, 0x53	; 83
 820:	30 e0       	ldi	r19, 0x00	; 0
 822:	f9 01       	movw	r30, r18
 824:	20 81       	ld	r18, Z
 826:	2e 7f       	andi	r18, 0xFE	; 254
 828:	fc 01       	movw	r30, r24
 82a:	20 83       	st	Z, r18
	
	// The led lights automatically after system wakes up
}
 82c:	00 00       	nop
 82e:	df 91       	pop	r29
 830:	cf 91       	pop	r28
 832:	08 95       	ret

00000834 <__vector_5>:



ISR(PCINT2_vect){
 834:	1f 92       	push	r1
 836:	0f 92       	push	r0
 838:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 83c:	0f 92       	push	r0
 83e:	11 24       	eor	r1, r1
 840:	cf 93       	push	r28
 842:	df 93       	push	r29
 844:	cd b7       	in	r28, 0x3d	; 61
 846:	de b7       	in	r29, 0x3e	; 62
	
	
	// If the pin is high, the system wakes up automatically
}
 848:	00 00       	nop
 84a:	df 91       	pop	r29
 84c:	cf 91       	pop	r28
 84e:	0f 90       	pop	r0
 850:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 854:	0f 90       	pop	r0
 856:	1f 90       	pop	r1
 858:	18 95       	reti

0000085a <__vector_21>:



// ADC section ->
ISR(ADC_vect){
 85a:	1f 92       	push	r1
 85c:	0f 92       	push	r0
 85e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 862:	0f 92       	push	r0
 864:	11 24       	eor	r1, r1
 866:	2f 93       	push	r18
 868:	3f 93       	push	r19
 86a:	4f 93       	push	r20
 86c:	5f 93       	push	r21
 86e:	6f 93       	push	r22
 870:	7f 93       	push	r23
 872:	8f 93       	push	r24
 874:	9f 93       	push	r25
 876:	af 93       	push	r26
 878:	bf 93       	push	r27
 87a:	ef 93       	push	r30
 87c:	ff 93       	push	r31
 87e:	cf 93       	push	r28
 880:	df 93       	push	r29
 882:	cd b7       	in	r28, 0x3d	; 61
 884:	de b7       	in	r29, 0x3e	; 62
	// Reads the adc and saves it in a variable
	conversion_result = ADC;
 886:	88 e7       	ldi	r24, 0x78	; 120
 888:	90 e0       	ldi	r25, 0x00	; 0
 88a:	fc 01       	movw	r30, r24
 88c:	80 81       	ld	r24, Z
 88e:	91 81       	ldd	r25, Z+1	; 0x01
 890:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <conversion_result+0x1>
 894:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <conversion_result>
	
	// Making sure that the result stays in wanted zone 50-1000Hz
	if(conversion_result < 50){
 898:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <conversion_result>
 89c:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <conversion_result+0x1>
 8a0:	c2 97       	sbiw	r24, 0x32	; 50
 8a2:	38 f4       	brcc	.+14     	; 0x8b2 <__vector_21+0x58>
		conversion_result = 50;
 8a4:	82 e3       	ldi	r24, 0x32	; 50
 8a6:	90 e0       	ldi	r25, 0x00	; 0
 8a8:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <conversion_result+0x1>
 8ac:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <conversion_result>
 8b0:	0d c0       	rjmp	.+26     	; 0x8cc <__vector_21+0x72>
	}
	else if( conversion_result > 1000){
 8b2:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <conversion_result>
 8b6:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <conversion_result+0x1>
 8ba:	89 3e       	cpi	r24, 0xE9	; 233
 8bc:	93 40       	sbci	r25, 0x03	; 3
 8be:	30 f0       	brcs	.+12     	; 0x8cc <__vector_21+0x72>
		conversion_result = 1000;
 8c0:	88 ee       	ldi	r24, 0xE8	; 232
 8c2:	93 e0       	ldi	r25, 0x03	; 3
 8c4:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <conversion_result+0x1>
 8c8:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <conversion_result>
	}
	
	// Sets also sounder frequency
	frequency_control = 124 + ((2499-124)*conversion_result) / 1000;
 8cc:	40 91 28 01 	lds	r20, 0x0128	; 0x800128 <conversion_result>
 8d0:	50 91 29 01 	lds	r21, 0x0129	; 0x800129 <conversion_result+0x1>
 8d4:	27 e4       	ldi	r18, 0x47	; 71
 8d6:	39 e0       	ldi	r19, 0x09	; 9
 8d8:	42 9f       	mul	r20, r18
 8da:	c0 01       	movw	r24, r0
 8dc:	43 9f       	mul	r20, r19
 8de:	90 0d       	add	r25, r0
 8e0:	52 9f       	mul	r21, r18
 8e2:	90 0d       	add	r25, r0
 8e4:	11 24       	eor	r1, r1
 8e6:	96 95       	lsr	r25
 8e8:	87 95       	ror	r24
 8ea:	96 95       	lsr	r25
 8ec:	87 95       	ror	r24
 8ee:	96 95       	lsr	r25
 8f0:	87 95       	ror	r24
 8f2:	9c 01       	movw	r18, r24
 8f4:	a5 ec       	ldi	r26, 0xC5	; 197
 8f6:	b0 e2       	ldi	r27, 0x20	; 32
 8f8:	0e 94 bf 04 	call	0x97e	; 0x97e <__umulhisi3>
 8fc:	92 95       	swap	r25
 8fe:	82 95       	swap	r24
 900:	8f 70       	andi	r24, 0x0F	; 15
 902:	89 27       	eor	r24, r25
 904:	9f 70       	andi	r25, 0x0F	; 15
 906:	89 27       	eor	r24, r25
 908:	84 58       	subi	r24, 0x84	; 132
 90a:	9f 4f       	sbci	r25, 0xFF	; 255
 90c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 910:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	OCR1A = frequency_control;
 914:	88 e8       	ldi	r24, 0x88	; 136
 916:	90 e0       	ldi	r25, 0x00	; 0
 918:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 91c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 920:	fc 01       	movw	r30, r24
 922:	31 83       	std	Z+1, r19	; 0x01
 924:	20 83       	st	Z, r18
	
}
 926:	00 00       	nop
 928:	df 91       	pop	r29
 92a:	cf 91       	pop	r28
 92c:	ff 91       	pop	r31
 92e:	ef 91       	pop	r30
 930:	bf 91       	pop	r27
 932:	af 91       	pop	r26
 934:	9f 91       	pop	r25
 936:	8f 91       	pop	r24
 938:	7f 91       	pop	r23
 93a:	6f 91       	pop	r22
 93c:	5f 91       	pop	r21
 93e:	4f 91       	pop	r20
 940:	3f 91       	pop	r19
 942:	2f 91       	pop	r18
 944:	0f 90       	pop	r0
 946:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 94a:	0f 90       	pop	r0
 94c:	1f 90       	pop	r1
 94e:	18 95       	reti

00000950 <main>:




int main(void)
{
 950:	cf 93       	push	r28
 952:	df 93       	push	r29
 954:	cd b7       	in	r28, 0x3d	; 61
 956:	de b7       	in	r29, 0x3e	; 62
    init_tasks();
 958:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <init_tasks>
	setup_system();
 95c:	0e 94 53 00 	call	0xa6	; 0xa6 <setup_system>
	
    while (1){
		
		// Call the task manager to see if there are any tasks to run
		task_manager();
 960:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <task_manager>
		
		// If pin is low, goes to sleep
		if(!(PIND & (1<<PD2))){
 964:	89 e2       	ldi	r24, 0x29	; 41
 966:	90 e0       	ldi	r25, 0x00	; 0
 968:	fc 01       	movw	r30, r24
 96a:	80 81       	ld	r24, Z
 96c:	88 2f       	mov	r24, r24
 96e:	90 e0       	ldi	r25, 0x00	; 0
 970:	84 70       	andi	r24, 0x04	; 4
 972:	99 27       	eor	r25, r25
 974:	89 2b       	or	r24, r25
 976:	a1 f7       	brne	.-24     	; 0x960 <main+0x10>
			go_sleep();
 978:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <go_sleep>
		}
    }
 97c:	f1 cf       	rjmp	.-30     	; 0x960 <main+0x10>

0000097e <__umulhisi3>:
 97e:	a2 9f       	mul	r26, r18
 980:	b0 01       	movw	r22, r0
 982:	b3 9f       	mul	r27, r19
 984:	c0 01       	movw	r24, r0
 986:	a3 9f       	mul	r26, r19
 988:	70 0d       	add	r23, r0
 98a:	81 1d       	adc	r24, r1
 98c:	11 24       	eor	r1, r1
 98e:	91 1d       	adc	r25, r1
 990:	b2 9f       	mul	r27, r18
 992:	70 0d       	add	r23, r0
 994:	81 1d       	adc	r24, r1
 996:	11 24       	eor	r1, r1
 998:	91 1d       	adc	r25, r1
 99a:	08 95       	ret

0000099c <_exit>:
 99c:	f8 94       	cli

0000099e <__stop_program>:
 99e:	ff cf       	rjmp	.-2      	; 0x99e <__stop_program>
